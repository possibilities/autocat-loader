

<%= source %>


/* AUTOCAT APPLICATION INJECTION */



var DevCard = React.createClass({displayName: 'DevCard',
  mixins: [React.addons.LinkedStateMixin],
  getDefaultProps:function(){
    return {initState:{}};
  },

  getInitialState:function(){
    return _.cloneDeep(this.props.initState);
  },

   componentDidMount: function() {
    this.tryMountChild();
  },


  render:function(){


    var component =  React.Children.only(this.props.children);
    var name = component.constructor.displayName;
    var propString = _.map(this.state ,function(val,key){ return key + "={" + val.data + "}";}).join(" ");
    var markupString = "<" + name + " " + propString + " />";

    var boundInputs = !_.isEmpty(this.state) ? _.map(this.state ,function(val,field){
      return this.renderTypedInput(field);
    }, this) : null;

    return(
      React.createElement("div", {className: "ui-card__content"},
        React.createElement("div", {className: "ui-card $modifier_class", style: {height:this.props.height}},
          React.createElement("div", {className: "ui-card__content ui-form"},
          React.createElement("div", {className: "ui-width-wrapper"},
            React.createElement("h3", null, name),
            React.createElement("div", {className: "ui-row"},
              React.createElement("div", {className: "ui-col-2of6"},
              	 React.createElement("div", {ref: "mount"})
              ),
              React.createElement("div", {className: "ui-col-4of6"},
                React.createElement("p", null, " ", this.props.description, " "),
                 boundInputs,
                React.createElement("pre", null, " ", React.createElement("code", null, " ", markupString, "  "), "  "))
              )
            )
          )
        ),

      this.state.errors ? JSON.stringify(this.state.errors) : null

      )
    );
  },


    tryMountChild: function() {
    var mountNode = this.refs.mount.getDOMNode();
     var component = React.Children.only(this.props.children);
    var ChildComponent = React.addons.cloneWithProps(component, _.mapValues(this.state,function(v,k){ return v.data;}) );

    try {
      React.unmountComponentAtNode(mountNode);
    } catch (e) { }


    try {
        React.render(
          ChildComponent,
          mountNode
        );

    } catch (err) {

        React.render(
          React.createElement("div", {className: "error"}, err.toString()),
          mountNode
        );

    }
    },


  renderTypedInput:function(field){

    var type = this.state[field]['type'];

    var changeHandler = function(evt){
      var val = evt.target.value;
      var newData = {};

      if (type === "array" || type === "object"){
        try {
          val = JSON.parse(val);

          newData[field] = {data:val, type:type};

          this.setState(newData);

        }
        catch(e){
          //TODO: figure out how to handle invalid input being live-entered -- could mean not using 'controlled components'?
          var errColl = this.state.errors ?  _.cloneDeep(this.state.errors) : [];
          errColl.push(e.message);
          this.setState({errors:errColl});

        }
      }
      else{
        newData[field] = {data:val, type:type};
        this.setState(newData);
      }



    }.bind(this);


    var inputVal = (type === "array" || type === "object") ? JSON.stringify(this.state[field]['data']) : this.state[field]['data'];


    var inputTypeHash = {array:"text", object:"text", string:"text", date:"date", number:"number"};


    return (
      React.createElement("fieldset", {className: "ui-form"},
        React.createElement("label", null, field),

        React.createElement("input", {type: inputTypeHash[type], onChange: changeHandler, value: inputVal})
      )
    );
  }

});







var AutoCatApp = React.createClass({
  displayName: 'AutoCatApp',
  render: function() {
      return  React.createElement("ul", null, " ",  __AUTOCAT_COMPONENTS__.map(function(c){ console.log(c.component.displayName); return  React.createElement("li", null, "   ", React.createElement(DevCard, null, React.createElement(c.component, null)), " ")   }), " ")
     }
});



React.render(React.createElement(AutoCatApp, null), document.body);
